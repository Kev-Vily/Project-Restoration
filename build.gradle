apply plugin: "java"
apply plugin: "java-library"

version '1.0'

targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_16

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenLocal()
    mavenCentral()
    google()
    jcenter()
    gradlePluginPortal()
    maven{ url 'https://oss.sonatype.org/content/repositories/releases'}
    maven{ url 'https://oss.sonatype.org/content/repositories/snapshots'}
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //libGDX Version Properties
    gdxVersion = '1.11.0' //Latest Snpahshot or Release
    gdxVideo = '1.3.2-SNAPSHOT' //Latest Snapshot or Release TODO plz request this from ANUKE

    //the build number that this mod is made for
    mindustryVersion = 'v142'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(org.gradle.jvm.tasks.Jar){
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{

    //implementation project(":src")
    //api "com.badlogicgames.gdx:gdx:$gdxVersion"
    //implementation "com.badlogicgames.gdx-video:gdx-video:$gdxVideo"
    //implementation "com.badlogicgames.gdx-video:gdx-video-lwjgl3:$gdxVideo"
    //implementation "com.badlogicgames.gdx-video:gdx-video-android:$gdxVideo"
    implementation files('lib/jai_core-1.1.3.jar')
    //implementation 'javax.desktop:desktop:19.0.2'

    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
